'use strict';

const constants = require('../common/constants');
const bot = require('../bot');
const registry = require('../common/registry');
const {STOP_TEXT, DATES} = constants;

class ReceiptService {
  /**
   * @param {Receipt} receipt
   * @param {Message} msg
   */
  constructor(receipt, msg) {
    this.receipt = receipt;
    this.msg = msg;
    this.statuses = constants.RECEIPT_STATUSES;
    this.categories = constants.CATEGORIES;
    this.receiptStorage = registry.getReceiptStorage();
  }

  async prompt() {
    switch(this.receipt.status) {
      case this.statuses.WAIT_DATE:
        await bot.say(this.msg.userId, '–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ 01.03.2019 –ª–∏–±–æ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É:', {
          reply_markup: {
            inline_keyboard: [
              [{text: `üìÖ –í—á–µ—Ä–∞`, callback_data: DATES.YESTERDAY}],
              [{text: `üìÖ –°–µ–≥–æ–¥–Ω—è`, callback_data: DATES.TODAY}],
            ],
          }
        });
        break;
      case this.statuses.WAIT_SUM:
        await bot.say(this.msg.userId, '–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É (—Ñ–æ—Ä–º–∞—Ç –¥–ª—è –≤–µ—â–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ: 150.99)');
        break;
      case this.statuses.WAIT_STORE:
        await bot.say(this.msg.userId, '–ö–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç:');
        break;
      case this.statuses.WAIT_CATEGORY:
        await bot.say(this.msg.userId, '–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:', {
          reply_markup: {
            inline_keyboard: Object.keys(this.categories).map(id =>
              [{text: this.categories[id], callback_data: id}]
            ),
          }
        });
        break;
      case this.statuses.WAIT_CONFIRMATION:
        await bot.say(this.msg.userId, '–ù–∞–∂–º–∏—Ç–µ "–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", –µ—Å–ª–∏ –≤—Å–µ –ø–æ–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω—ã –≤–µ—Ä–Ω–æ. ' +
          '–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –ø–æ–ª–µ, —á—Ç–æ–±—ã –∏–∑–º–µ–Ω–∏—Ç—å –µ–≥–æ.', {
          reply_markup: {
            inline_keyboard: [
              [{text: `‚úè –î–∞—Ç–∞: ${this.receipt.formatDate}`, callback_data: this.statuses.WAIT_DATE}],
              [{text: `‚úè –°—É–º–º–∞: ${this.receipt.sum}`, callback_data: this.statuses.WAIT_SUM}],
              [{text: `‚úè –ö–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç: ${this.receipt.store}`, callback_data: this.statuses.WAIT_STORE}],
              [{text: `‚úè –ö–∞—Ç–µ–≥–æ—Ä–∏—è: ${this.categories[this.receipt.category]}`, callback_data: this.statuses.WAIT_CATEGORY}],
              [{text: '‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å', callback_data: this.statuses.CLOSED}],
            ],
          }
        });
        break;
      default:
        await bot.say(this.msg.userId, '‚úÖ –ß–µ–∫ –°–æ—Ö—Ä–∞–Ω–µ–Ω.');
        break;
    }
  }

  updateStatus() {
    if (this.receipt.status === this.statuses.CLOSED || this.receipt.status === this.statuses.TERMINATED) {
      return;
    }

    if (!this.receipt.date) {
      this.receipt.status = this.statuses.WAIT_DATE;
      return;
    }

    if (!this.receipt.sum) {
      this.receipt.status = this.statuses.WAIT_SUM;
      return;
    }

    if (!this.receipt.store) {
      this.receipt.status = this.statuses.WAIT_STORE;
      return;
    }

    if (!this.receipt.category) {
      this.receipt.status = this.statuses.WAIT_CATEGORY;
      return;
    }

    this.receipt.status = this.statuses.WAIT_CONFIRMATION;
  }

  async setReply() {
    let isValueSet = false;
    let property = '';
    let value = this.msg.text;
    if (this.receipt.status === this.statuses.WAIT_CONFIRMATION) {
      await this._confirmation();
      return;
    }
    if (value === STOP_TEXT) {
      await this._stop();
      return;
    }
    switch(this.receipt.status) {
      case this.statuses.WAIT_DATE:
        isValueSet = this._setDate(value);
        property = '–î–∞—Ç–∞';
        break;
      case this.statuses.WAIT_SUM:
        isValueSet = this._setSum(value);
        property = '–°—É–º–º–∞';
        break;
      case this.statuses.WAIT_STORE:
        isValueSet = this._setStore(value);
        property = '–ö–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç';
        break;
      case this.statuses.WAIT_CATEGORY:
        isValueSet = this._setCategory(value);
        property = '–ö–∞—Ç–µ–≥–æ—Ä–∏—è';
        if (isValueSet) {
          value = this.categories[value];
        }
        break;
    }

    if (isValueSet) {
      this.updateStatus();
      const isSaved = await this.receiptStorage.save(this.receipt);
      if (isSaved) {
        await this.prompt();
        return true;
      }
    }

    await this.prompt();
    return false;
  }

  async _stop() {
    this.receipt.status = this.statuses.TERMINATED;
    const isSaved = await this.receiptStorage.save(this.receipt);
    if (isSaved) {
      await bot.say(this.msg.userId, `–ß–µ–∫ –∑–∞–∫—Ä—ã—Ç.`);
      return true;
    }
    console.log('Can`t save terminated receipt.');
    return false;
  }

  async _confirmation() {
    const newStatus = Number(this.msg.text);
    const statuses = [
      this.statuses.WAIT_DATE,
      this.statuses.WAIT_SUM,
      this.statuses.WAIT_STORE,
      this.statuses.WAIT_CATEGORY,
      this.statuses.CLOSED,
    ];
    if (statuses.indexOf(newStatus) < 0) {
      await this.prompt();
      return false;
    }
    this.receipt.status = newStatus;
    const isSaved = await this.receiptStorage.save(this.receipt);
    if (isSaved) {
      await this.prompt();
      return true;
    }

    console.log(`Can't save receipt in confirmation section.`);
    return false;
  }

  _setDate(value) {
    const matches = value.match(/^(\d{1,2}).(\d{1,2}).(\d{4})$/);
    if (!matches) {
      bot.say(this.msg.userId, '‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.').catch();
      return false;
    }
    const day = Number(matches[1]);
    if (day < 1 || day > 31) {
      bot.say(this.msg.userId, '‚ùå –î–µ–Ω—å —É–∫–∞–∑–∞–Ω –Ω–µ–≤–µ—Ä–Ω–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.').catch();
      return false;
    }

    const month = Number(matches[2]);
    if (month < 1 || month > 12) {
      bot.say(this.msg.userId, '‚ùå –ú–µ—Å—è—Ü —É–∫–∞–∑–∞–Ω –Ω–µ–≤–µ—Ä–Ω–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.').catch();
      return false;
    }

    const year = Number(matches[3]);
    const currentYear = new Date().getFullYear();
    if (year !== currentYear && year !== currentYear - 1) {
      bot.say(this.msg.userId, '‚ùå –ì–æ–¥ –º–æ–∂–µ—Ç –±—ã—Ç—å –ª–∏–±–æ —Ç–µ–∫—É—â–∏–π, –ª–∏–±–æ –ø—Ä–µ–¥—ã–¥—É—â–∏–π. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.').catch();
      return false;
    }

    const date = Date.UTC(year, month - 1, day, 0, 0, 0, 0);
    if (date > new Date().getTime()) {
      bot.say(this.msg.userId, '‚ùå –î–∞—Ç–∞ –Ω–µ –º–æ–∂–µ—Ç –æ–ø–µ—Ä–µ–∂–∞—Ç—å —Ç–µ–∫—É—â—É—é. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.').catch();
      return false;
    }

    this.receipt.date = date;
    return true;
  }

  _setSum(value) {
    const matches = value.match(/^(\d+)(\.\d{1,2})?$/);
    if (!matches) {
      bot.say(this.msg.userId, '‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å—É–º–º—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.').catch();
      return false;
    }

    this.receipt.sum = value;
    return true;
  }

  _setStore(value) {
    this.receipt.store = value;
    return true;
  }

  _setCategory(value) {
    if (Object.keys(this.categories).indexOf(value) < 0) {
      bot.say(this.msg.userId, '‚ùå –£–∫–∞–∑–∞–Ω–Ω–∞—è –í–∞–º–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.').catch();
      return false;
    }
    this.receipt.category = value;
    return true;
  }
}

module.exports = ReceiptService;
